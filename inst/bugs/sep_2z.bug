model
{
  K <- 10000
  
	for(i in 1:n)
	{	   			
    random[i] <- inprod(alpha[EUID[i],],z[i,])

    # 1: mean
    logit(ph1[i,1])  <- inprod(b[], xmu.1[i,]) +random[i]*rid[1]
    cloglog(ph1[i,2])<- inprod(b[], xmu.1[i,]) +random[i]*rid[1]
    probit(ph1[i,3]) <- inprod(b[], xmu.1[i,]) +random[i]*rid[1]
    mu[i]<- inprod(ph1[i, ],link[1,])

    # 2: sum  
    log(den[i]) <- inprod(d[],  xsum.1[i,]) + random[i]*rid[2]
  
    s1[i]<- den[i]*mu[i]
    s2[i]<- den[i]*(1-mu[i])  

    ll[i]<- (s1[i]-1)*log(y[i])+(s2[i]-1)*log(1-y[i])+
              loggam(s1[i]+s2[i])-loggam(s1[i])-loggam(s2[i])   
    trick[i] <- K-ll[i]
    zero[i] ~ dpois(trick[i]) 

    ypred[i] <- mu[i]
    #phi[i] <- den[i]
  }


  tmp1 ~ dnorm(0, hyper[1,1])  
  b[1] <- tmp1
  for(i in 1:(p.xmu-1))
  {
    ###   diffuse normal ###
    b.tmp[i,1] ~ dnorm(0.0, hyper[1,2]) 
     
    ###   L1 (lasso) ### 
		b.tmp[i,2] ~ dnorm(0.0,taub.L1[i]);  
    taub.L1[i] <- 1/sigmab.L1[i]; 	        
    sigmab.L1[i] ~ dexp(hyper[1,3]); 

    ###   L2  (ridge) ###
    b.tmp[i,3] ~ dnorm(0.0,taub.L2); 
		
		###   ARD  ###
		b.tmp[i,4] ~ dnorm(0.0,taub.ARD[i]);       
    taub.ARD[i] ~ dgamma(hyper[1,5], hyper[1,5]); 	      
    
    b[i+1] <- inprod(b.tmp[i, ],prior1[1,])   
 	}
  taub.L2 ~ dgamma(hyper[1,4],hyper[1,4]);  # L2 (ridge)
  
  	      
  tmp2 ~ dnorm(0, hyper[2,1])
  d[1] <- tmp2
	for(i in 1:(p.xsum-1))
	{
		d.tmp[i,1] ~ dnorm(0, hyper[2,2]) 
    
		d.tmp[i,2] ~ dnorm(0.0,taud.L1[i]);  
    taud.L1[i] <- 1/sigmad.L1[i]; 	        
    sigmad.L1[i] ~ dexp(hyper[2,3]); 
    
    d.tmp[i,3] ~ dnorm(0.0,taud.L2);
    		
		d.tmp[i,4] ~ dnorm(0.0,taud.ARD[i]);       
    taud.ARD[i] ~ dgamma(hyper[2,5], hyper[2,5]); 
    	          
    d[i+1] <- inprod(d.tmp[i, ],prior1[2,])
 	}
  taud.L2 ~ dgamma(hyper[2,4],hyper[2,4]);  
 

  for(i in 1:qz){ mu0[i] <- 0 }
  for(i in 1:nEU){ alpha[i,1:qz] ~ dmnorm(mu0,invSigma) }
  invSigma <- inverse(Sigma)
  Sigma <- Sigma.VC + Sigma.UN
  

  ######################### 1. VC #####################################################
  # if the zdummy is coded in a nested way, then the nested variance structure
  # (banded Compound symmetry) is just a special case of VC
  # in other words, whether CS or not is determined by how zdummy is coded.
  #####################################################################################
  for(i in 1:(qz-1)){
    for(j in (i+1):qz){ 
      Sigma.VC[i,j] <- 0
      Sigma.VC[j,i] <- 0} }
  
  for(i in 1:nz0){   
    sigma.VC1[i] ~ dunif(0, hyper2)       ##### uniform #####   
    
    t[i] ~ dt(0, pow(hyper2,-2), 1);           ##### half_Cauchy #####
    sigma.VC2[i] <- abs(t[i])
    
    for(j in (cumm[i]+1):(cumm[i]+m[i])) {
      Sigma.VC[j,j] <- pow(sigma.VC1[i],2)*prior2[1,1]+ 
                       pow(sigma.VC2[i],2)*prior2[1,2]    
    }  
  }   

  ######################### 2. UN (unstructed) #################################### 
  # used when nz0 = qz, such as continuous random variable with random coefficient
  #################################################################################

  rho1 ~ dunif(-0.999,0.999)
  rho2 ~ dunif(-0.999,0.999)
  l <- rho1*rho2 - sqrt( (1-pow(rho1,2))*(1-pow(rho2,2)))
  u <- rho1*rho2 + sqrt( (1-pow(rho1,2))*(1-pow(rho2,2)))
  rho3 ~ dunif(l, u)
  
  R[1,1] <- 1
  R[1,2] <- 0
  R[1,3] <- 0
  R[2,1] <- rho1
  R[2,2] <- sqrt(1-pow(rho1,2))
  R[2,3] <- 0
  R[3,1] <- rho2
  R[3,2] <- (rho3-rho1*rho2)/R[2,2]
  tmp <- abs(1-rho1^2-rho2^2-rho3^2+2*rho1*rho2*rho3)
  R[3,3] <- sqrt(tmp+0.0001)/R[2,2]

  ### uniform
  for(i in 1:qz){ 
    scale1[i] ~ dunif(0, hyper2)  
    for(j in 1:qz){ 
      V1[i,j] <- scale1[i]*equals(i,j)   
    }
  }
  V1R <- V1%*%R[1:qz,1:qz]
  Sigma.UN1 <- V1R%*%t(V1R)

  ###  half t    
  for(i in 1:qz){                        
    scale2[i] ~ dt(0, pow(hyper2,-2), 1);    
    for(j in 1:qz){ 
      V2[i,j] <- abs(scale2[i])*equals(i,j) 
    }
  }
  V2R <- V2%*%R[1:qz,1:qz]
  Sigma.UN2 <- V2R%*%t(V2R)

  Sigma.UN <- Sigma.UN1*prior2[2,1] +Sigma.UN2*prior2[2,2]   

}

